colorscheme catppuccin-mocha

add-highlighter global/ number-lines -hlcursor -relative -separator " "
add-highlighter global/ show-matching
add-highlighter global/column-limit column 80 default,black+d

# highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error

# using this just for indents since i keep near religious track of them
add-highlighter global/ show-whitespaces -spc ' ' -lf ' '

set-option global tabstop 8
set-option global indentwidth 0
set-option global scrolloff 0,3

set-option -add global ui_options terminal_status_on_top=true
set-option -add global ui_options terminal_assistant=none

# jk to escape
hook global InsertChar k %{
	try %{
		exec -draft hH <a-k>jk<ret> d
		exec <esc>
	}
}
# tab 4 completion window
hook global InsertCompletionShow .* %{
	try %{
		execute-keys -draft 'h<a-K>\h<ret>'

		map window insert <tab> <c-n>
		map window insert <s-tab> <c-p>

		hook -once -always window InsertCompletionHide .* %{
			unmap window insert <tab> <c-n>
			unmap window insert <s-tab> <c-p>
		}
	}
}

# choosing which standard library stuff I want
nop %sh{
	# just checks if the symlink already exists and then symlinks it
	rc_import() {
		[ ! -e $kak_config/autoload/$2 ] && ln -s "$kak_runtime/rc/$1" "$kak_config/autoload/$2"
	}

	rc_import "windowing/zellij.kak" "zellij.kak"

	rc_import "tools/comment.kak" "comment.kak"
	rc_import "tools/git.kak" "git.kak"
	# for some reason the symlink process for this is just satanic and cursed,,, so i decided to comment it out
	# rc_import "tools/fifo.kak" "fifo.kak"
	rc_import "tools/grep.kak" "grep.kak"
	rc_import "tools/jump.kak" "jump.kak"
	rc_import "tools/format.kak" "format.kak"
	rc_import "tools/lint.kak" "lint.kak"

	rc_import "detection/file.kak" "file.kak"

	rc_import "filetype/sh.kak" "sh.kak"
	rc_import "filetype/kakrc.kak" "kakrc.kak"
	rc_import "filetype/lua.kak" "lua.kak"
	rc_import "filetype/asciidoc.kak" "asciidoc.kak"
	rc_import "filetype/odin.kak" "odin.kak"
	rc_import "filetype/diff.kak" "diff.kak"
	rc_import "filetype/toml.kak" "toml.kak"
	rc_import "filetype/json.kak" "json.kak"
}

require-module zellij
require-module grep

# vim reflexes
map global insert <c-w> '<esc>:execute-keys bd<ret>i'

# i swap when i use the alt keybind more than the shift one
map global normal <s-n> "<a-n>"
map global normal <a-n> "<s-n>"

map global normal S "<a-s>"
map global normal <a-s> "S"

map global normal ? '<a-/>'
map global normal <a-/> '?'

map global normal F "<a-f>"
map global normal <a-f> "F"

map global normal <esc> ";,"
map global normal , "<a-i>"
map global normal . "<a-a>"
map global normal "'" "<a-;>"

map global normal m "<c-d>"
map global normal M "<c-u>"

# for wsl
map -docstring 'copy to system clipboard' global user y '<a-|>clip.exe<ret>'
map -docstring 'comment line' global user c ':comment-line<ret>'

map -docstring 'open yazi (filetree)' global user t ':zellij-action new-pane -fc -- yazi<ret>'

set-option global grepcmd 'rg --column --smart-case --sort path --vimgrep'
complete-command edit shell-script-candidates %{ fd . --type f }

map -docstring 'find files' global user f ':edit '
map -docstring 'global search/grep' global user s ':grep '

declare-user-mode window
map -docstring 'enter window mode' global user w ':enter-user-mode window<ret>'
map -docstring 'split vertical' global window s ':zellij-action new-pane -cd down -- kak -c %val{session} -e "%arg{@}"<ret>'
map -docstring 'split horizontal' global window v ':zellij-action new-pane -cd left -- kak -c %val{session} -e "%arg{@}"<ret>'
map -docstring 'focus left' global window h ':zellij-action move-focus left<ret>'
map -docstring 'focus down' global window j ':zellij-action move-focus down<ret>'
map -docstring 'focus up' global window k ':zellij-action move-focus up<ret>'
map -docstring 'focus right' global window l ':zellij-action move-focus right<ret>'

declare-user-mode buffer
map -docstring 'enter buffer mode' global user b ':enter-user-mode buffer<ret>'
map -docstring 'next buffer' global buffer n ':buffer-next<ret>'
map -docstring 'next buffer' global buffer p ':buffer-previous<ret>'
map -docstring 'buffer search' global buffer s ':buffer '
map -docstring 'delete buffer' global buffer d ':delete-buffer<ret>'

declare-user-mode git
map -docstring 'enter git mode' global user g ':enter-user-mode git<ret>'
map -docstring 'git add' global git a ':git add '
map -docstring 'git add all' global git A ':git add -A<ret>'
map -docstring 'git status' global git s ':git status<ret>'
map -docstring 'git reset' global git r ':git reset<ret>'
map -docstring 'git commit' global git c ':git commit '
map -docstring 'git checkout' global git C ':git checkout '
map -docstring 'git log' global git l ':git log<ret>'
map -docstring 'git diff' global git d ':git diff<ret>'

# this mode will be edited in buffer scope by individual filetypes
declare-user-mode language
map -docstring 'enter language mode' global user l ':enter-user-mode language<ret>'
